name: Daily ScalarDB Cluster test

on:
  schedule:
    - cron: "0 10 * * *"

jobs:
  daily-cluster:
    name: "Daily ScalarDB Cluster test"

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        tests:
          - name: "Transfers_SI"
            workload: "transfer transfer-append"
            nemesis: "none partition packet clock crash"
            enable_group_commit: false
            isolation_level: "snapshot"
            consistency_model: "snapshot-isolation"
          - name: "Transfers_2PC_SI"
            workload: "transfer-2pc transfer-append-2pc"
            nemesis: "none partition packet clock crash"
            enable_group_commit: false
            isolation_level: "snapshot"
            consistency_model: "snapshot-isolation"
          - name: "RCSI"
            workload: "elle-append elle-write-read"
            nemesis: "none partition packet clock crash"
            enable_group_commit: false
            isolation_level: "snapshot"
            consistency_model: "cursor-stability"
          - name: "RCSI_2PC"
            workload: "elle-append-2pc elle-write-read-2pc"
            nemesis: "none partition packet clock crash"
            enable_group_commit: false
            isolation_level: "snapshot"
            consistency_model: "cursor-stability"
          - name: "Serializable"
            workload: "elle-append elle-write-read"
            nemesis: "none partition packet clock crash"
            enable_group_commit: false
            isolation_level: "serializable"
            consistency_model: "strict-serializable"
          - name: "Serializable_2PC"
            workload: "elle-append-2pc elle-write-read-2pc"
            nemesis: "none partition packet clock crash"
            enable_group_commit: false
            isolation_level: "serializable"
            consistency_model: "strict-serializable"
          - name: "GroupCommit"
            workload: "elle-append elle-write-read"
            nemesis: "none partition packet clock crash"
            enable_group_commit: true
            isolation_level: "serializable"
            consistency_model: "strict-serializable"

    steps:
    - uses: actions/checkout@v4

    # Need ssh to the localhost and graphviz
    - name: Install packages
      run: |
        sudo apt update
        sudo apt install -y openssh-server graphviz

    - name: Enable ssh for runner user
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N ""
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
        chmod 600 ~/.ssh/authorized_keys
        sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
        sudo sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
        sudo service ssh restart

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install leiningen
      uses: DeLaGuardo/setup-clojure@13.0
      with:
        lein: latest

    - name: Cache m2 repository
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/project.clj') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Set up Kind cluster
      uses: helm/kind-action@v1.12.0
      with:
        cluster_name: test-cluster

    - name: Install MetalLB
      run: |
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml
        kubectl wait --namespace metallb-system \
          --for=condition=Ready pods \
          --selector=app=metallb \
          --timeout=90s

        NET=$(docker network inspect kind | jq -r '.[0].IPAM.Config[] | select(.Subnet | test("^fc00") | not) | .Subnet')
        echo "IPv4 Subnet: $NET"

        PREFIX=$(echo "$NET" | cut -d. -f1-2)
        IP_RANGE="${PREFIX}.255.200-${PREFIX}.255.250"

        cat <<EOF | kubectl apply -f -
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: kind-pool
          namespace: metallb-system
        spec:
          addresses:
            - $IP_RANGE
        ---
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2adv
          namespace: metallb-system
        EOF

    - name: Install dependencies
      run: |
        cd cassandra
        lein install

    - name: ${{ matrix.tests.name }}
      run: |
        cd scalardb
        OPTS=""
        for w in ${{ matrix.tests.workload }}; do
          OPTS+=" --workload ${w}"
        done
        for n in ${{ matrix.tests.nemesis }}; do
          OPTS+=" --nemesis ${n}"
        done
        OPTS+=" --isolation-level ${{ matrix.tests.isolation_level }}"
        OPTS+=" --consistency-model ${{ matrix.tests.consistency_model }}"
        if [ "${{ matrix.tests.enable_group_commit }}" = "true" ]; then
          OPTS+=" --enable-group-commit"
        fi
        lein with-profile cluster run test \
          --time-limit 600 \
          --nodes localhost \
          --db cluster \
          --concurrency 5 \
          --username runner \
          --ssh-private-key ~/.ssh/id_rsa \
          --docker-username ${{ github.repository_owner }} \
          --docker-access-token ${{ secrets.CR_PAT }} \
          ${OPTS} > /dev/null 2>&1

    - name: Record result
      if: always()
      run: |
        mkdir -p result-${{ matrix.tests.name }}
        if grep -q "Everything looks good!" scalardb/store/latest/jepsen.log; then
          echo "${{ matrix.tests.name }}:success" > result-${{ matrix.tests.name }}/result.txt
        else
          echo "${{ matrix.tests.name }}:failure" > result-${{ matrix.tests.name }}/result.txt
        fi
    
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-${{ matrix.tests.name }}
        path: result-${{ matrix.tests.name }}/result.txt

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.tests.name }}
        path: scalardb/store

  notify-slack:
    name: Notify Slack
    if: always()
    needs: daily-cluster
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Download result artifacts only
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          mkdir -p results
          gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            --jq '.artifacts[] | select(.name | startswith("result-")) | .name' | \
            while read name; do
              echo "Downloading $name"
              gh run download ${{ github.run_id }} -n "$name" -D results -R "${{ github.repository }}"
            done

      - name: Generate Slack message
        id: message
        run: |
          successes=""
          failures=""

          for file in results/result-*/result.txt; do
            while read -r line; do
              name=$(echo "$line" | cut -d: -f1)
              status=$(echo "$line" | cut -d: -f2)

              if [ "$status" = "success" ]; then
                successes="${successes}- $name\n"
              else
                failures="${failures}- $name\n"
              fi
            done < "$file"
          done

          {
            echo "message<<EOF"
            printf ":white_check_mark: *ScalarDB Cluster tests completed*\n\n"
            printf "*Success:*\n%s\n" "$successes"
            printf "*Failed:*\n%s\n" "$failures"
            printf "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>\n"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Post to Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"${{ steps.message.outputs.message }}\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
